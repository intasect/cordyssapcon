/**
 * Copyright 2005 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys SAP Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 package com.eibus.applicationconnector.sap.exception;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.core.utils.CoEMessageGenerator.
 */

public class SAPConnectorExceptionMessages
{ 

	public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.eibus.applicationconnector.sap.exception.SAPConnectorExceptionMessages");

	/** Could not disconnect some or all the connections: {0} */
	public static final Message ERR_COULD_NOT_DISCONNECT = MESSAGE_SET.getMessage("ErrCouldNotDisconnect");

	/** Error creating connection for user {0} */
	public static final Message ERR_CREATING_CONNECTION = MESSAGE_SET.getMessage("ErrCreatingConnection");

	/** Error waiting for free connection */
	public static final Message ERROR_WAITING_FOR_FREE_CONNECTION = MESSAGE_SET.getMessage("ErrorWaitingForFreeConnection");

	/** Error returned from sap. 
Code: {0}
Message: {1} */
	public static final Message ERROR_RETURNED_FROM_SAP = MESSAGE_SET.getMessage("ErrorReturnedFromSap");

	/** Error sending request */
	public static final Message ERROR_SENDING_REQUEST = MESSAGE_SET.getMessage("ErrorSendingRequest");

	/** Object type is empty */
	public static final Message ERROR_OBJECT_TYPE_IS_EMPTY = MESSAGE_SET.getMessage("ErrorObjectTypeIsEmpty");

	/** Invalid request parameters */
	public static final Message ERROR_INVALID_REQUEST_PARAMETERS = MESSAGE_SET.getMessage("ErrorInvalidRequestParameters");

	/** BAPI name or bo name is empty */
	public static final Message ERROR_BAPI_NAME_OR_BO_NAME_IS_EMPTY = MESSAGE_SET.getMessage("ErrorBapiNameOrBoNameIsEmpty");

	/** Error cache folder not found: {0} */
	public static final Message ERROR_CACHE_FOLDER_NOT_FOUND = MESSAGE_SET.getMessage("ErrorCacheFolderNotFound");

	/** Error waiting for other thread to load metadata */
	public static final Message ERROR_WAITING_FOR_OTHER_THREAD_TO_LOAD_METADATA = MESSAGE_SET.getMessage("ErrorWaitingForOtherThreadToLoadMetadata");

	/** Error loading metadata cache of type {0} from folder {1} */
	public static final Message ERROR_LOADING_METADATA_CACHE = MESSAGE_SET.getMessage("ErrorLoadingMetadataCache");

	/** Error loading interface template */
	public static final Message ERROR_LOADING_INTERFACE_TEMPLATE = MESSAGE_SET.getMessage("ErrorLoadingInterfaceTemplate");

	/** Error decoding password */
	public static final Message ERROR_DECODING_PASSWORD = MESSAGE_SET.getMessage("ErrorDecodingPassword");

	/** Error doing rollback */
	public static final Message ERROR_DOING_ROLLBACK = MESSAGE_SET.getMessage("ErrorDoingRollback");

	/** Error doing commit */
	public static final Message ERROR_DOING_COMMIT = MESSAGE_SET.getMessage("ErrorDoingCommit");

	/** Error mestype tag not found in implementation */
	public static final Message ERROR_MESTYPE_TAG_NOT_FOUND_IN_IMPLEMENTATION = MESSAGE_SET.getMessage("ErrorMestypeTagNotFoundInImplementation");

	/** Error message type not found in implementation */
	public static final Message ERROR_MESSAGE_TYPE_NOT_FOUND_IN_IMPLEMENTATION = MESSAGE_SET.getMessage("ErrorMessageTypeNotFoundInImplementation");

	/** Error parsing sap response: {0} */
	public static final Message ERROR_PARSING_SAP_RESPONSE = MESSAGE_SET.getMessage("ErrorParsingSapResponse");

	/** Error sap returned a fault: {0} */
	public static final Message ERROR_SAP_RETURNED_AFAULT = MESSAGE_SET.getMessage("ErrorSapReturnedAFault");

	/** Error parsing control record schema {0} */
	public static final Message ERROR_PARSING_CONTROL_RECORD_SCHEMA = MESSAGE_SET.getMessage("ErrorParsingControlRecordSchema");

	/** Error could not find service group dn in request */
	public static final Message ERROR_COULD_NOT_FIND_SERVICE_GROUP_DN_IN_REQUEST = MESSAGE_SET.getMessage("ErrorCouldNotFindServiceGroupDnInRequest");

	/** Unable to get ldap connection */
	public static final Message UNABLE_TO_GET_LDAP_CONNECTION = MESSAGE_SET.getMessage("UnableToGetLdapConnection");

	/** Error getting next entry from ldap */
	public static final Message ERROR_GETTING_NEXT_ENTRY_FROM_LDAP = MESSAGE_SET.getMessage("ErrorGettingNextEntryFromLdap");

	/** Cannot find service group for method {0} */
	public static final Message CANNOT_FIND_SERVICE_GROUP_FOR_METHOD = MESSAGE_SET.getMessage("CannotFindServiceGroupForMethod");

	/** Error executing method {0} */
	public static final Message ERROR_EXECUTING_METHOD = MESSAGE_SET.getMessage("ErrorExecutingMethod");

	/** Could not find authenticated user {0} */
	public static final Message COULD_NOT_FIND_AUTHENTICATED_USER = MESSAGE_SET.getMessage("CouldNotFindAuthenticatedUser");

	/** Error method returned a soap fault.
Code: {0}
Details: {1}
Full response:
{2} */
	public static final Message ERROR_METHOD_RETURNED_ASOAP_FAULT = MESSAGE_SET.getMessage("ErrorMethodReturnedASoapFault");

	/** Error getting ldap internal connector */
	public static final Message ERROR_GETTING_LDAP_INTERNAL_CONNECTOR = MESSAGE_SET.getMessage("ErrorGettingLdapInternalConnector");

	/** Error getting current date */
	public static final Message ERROR_GETTING_CURRENT_DATE = MESSAGE_SET.getMessage("ErrorGettingCurrentDate");

	/** Error method already exists */
	public static final Message ERROR_METHOD_ALREADY_EXISTS = MESSAGE_SET.getMessage("ErrorMethodAlreadyExists");

	/** Error parsing template {0} */
	public static final Message ERROR_PARSING_TEMPLATE = MESSAGE_SET.getMessage("ErrorParsingTemplate");

	/** Error writing file {0} */
	public static final Message ERROR_WRITING_FILE = MESSAGE_SET.getMessage("ErrorWritingFile");

	/** Error parsing idoc {0} */
	public static final Message ERROR_PARSING_IDOC = MESSAGE_SET.getMessage("ErrorParsingIdoc");

	/** Control record not found for idoc {0} */
	public static final Message CONTROL_RECORD_NOT_FOUND_FOR_IDOC = MESSAGE_SET.getMessage("ControlRecordNotFoundForIdoc");

	/** Target mapping not found for idoc {0} */
	public static final Message TARGET_MAPPING_NOT_FOUND_FOR_IDOC = MESSAGE_SET.getMessage("TargetMappingNotFoundForIdoc");

	/** Target mappings not found in mapping xml */
	public static final Message TARGET_MAPPINGS_NOT_FOUND_IN_MAPPING_XML = MESSAGE_SET.getMessage("TargetMappingsNotFoundInMappingXml");

	/** Search pattern not properly specified */
	public static final Message SEARCH_PATTERN_NOT_PROPERLY_SPECIFIED = MESSAGE_SET.getMessage("SearchPatternNotProperlySpecified");

	/** Invalid method details */
	public static final Message INVALID_METHOD_DETAILS = MESSAGE_SET.getMessage("InvalidMethodDetails");

	/** No mappings found in target mapping xml */
	public static final Message NO_MAPPINGS_FOUND_IN_TARGET_MAPPING_XML = MESSAGE_SET.getMessage("NoMappingsFoundInTargetMappingXml");

	/** Invalid idoc interface in cache folder */
	public static final Message INVALID_IDOC_INTERFACE_IN_CACHE_FOLDER = MESSAGE_SET.getMessage("InvalidIdocInterfaceInCacheFolder");

	/** Invalid parameters in rfc interface */
	public static final Message INVALID_PARAMETERS_IN_RFC_INTERFACE = MESSAGE_SET.getMessage("InvalidParametersInRfcInterface");

	/** There are no segments without a parent segment */
	public static final Message THERE_ARE_NO_SEGMENTS_WITHOUT_APARENT_SEGMENT = MESSAGE_SET.getMessage("ThereAreNoSegmentsWithoutAParentSegment");

	/** Segment type node is not found */
	public static final Message SEGMENT_TYPE_NODE_IS_NOT_FOUND = MESSAGE_SET.getMessage("SegmentTypeNodeIsNotFound");

	/** Segment type is empty */
	public static final Message SEGMENT_TYPE_IS_EMPTY = MESSAGE_SET.getMessage("SegmentTypeIsEmpty");

	/** Error checking idoc syntax.
Field name: {0}
Segment type: {1} */
	public static final Message ERROR_CHECKING_IDOC_SYNTAX = MESSAGE_SET.getMessage("ErrorCheckingIdocSyntax");

	/** Error creating transaction id */
	public static final Message ERROR_CREATING_TRANSACTION_ID = MESSAGE_SET.getMessage("ErrorCreatingTransactionId");

	/** Error dispatching idoc */
	public static final Message ERROR_DISPATCHING_IDOC = MESSAGE_SET.getMessage("ErrorDispatchingIdoc");

	/** Error handling idoc request */
	public static final Message ERROR_HANDLING_IDOC_REQUEST = MESSAGE_SET.getMessage("ErrorHandlingIdocRequest");

	/** Request node is not filled */
	public static final Message REQUEST_NODE_IS_NOT_FILLED = MESSAGE_SET.getMessage("RequestNodeIsNotFilled");

	/** Error handling rfc request */
	public static final Message ERROR_HANDLING_RFC_REQUEST = MESSAGE_SET.getMessage("ErrorHandlingRfcRequest");

	/** Error transforming request to xml. Request: {0} */
	public static final Message ERROR_TRANSFORMING_REQUEST_TO_XML = MESSAGE_SET.getMessage("ErrorTransformingRequestToXml");

	/** Error executing request. Original request: {0} */
	public static final Message ERROR_EXECUTING_REQUEST = MESSAGE_SET.getMessage("ErrorExecutingRequest");

	/** Error executing function call. SAP error: {0} */
	public static final Message ERROR_EXECUTING_FUNCTION_CALL = MESSAGE_SET.getMessage("ErrorExecutingFunctionCall");

	/** Error transforming response to xml */
	public static final Message ERROR_TRANSFORMING_RESPONSE_TO_XML = MESSAGE_SET.getMessage("ErrorTransformingResponseToXml");

	/** Error converting sap response to xml */
	public static final Message ERROR_CONVERTING_SAP_RESPONSE_TO_XML = MESSAGE_SET.getMessage("ErrorConvertingSapResponseToXml");

	/** Control record not found in the request */
	public static final Message CONTROL_RECORD_NOT_FOUND_IN_THE_REQUEST = MESSAGE_SET.getMessage("ControlRecordNotFoundInTheRequest");

	/** Error setting request parameters for the idoc */
	public static final Message ERROR_SETTING_REQUEST_PARAMETERS_FOR_THE_IDOC = MESSAGE_SET.getMessage("ErrorSettingRequestParametersForTheIdoc");

	/** Error getting function template */
	public static final Message ERROR_GETTING_FUNCTION_TEMPLATE = MESSAGE_SET.getMessage("ErrorGettingFunctionTemplate");

	/** Idoc status not found in sap */
	public static final Message IDOC_STATUS_NOT_FOUND_IN_SAP = MESSAGE_SET.getMessage("IdocStatusNotFoundInSap");

	/** Error aborting request */
	public static final Message ERROR_ABORTING_REQUEST = MESSAGE_SET.getMessage("ErrorAbortingRequest");

	/** Error committing request */
	public static final Message ERROR_COMMITTING_REQUEST = MESSAGE_SET.getMessage("ErrorCommittingRequest");

	/** Could not find tag {0} in implementation */
	public static final Message COULD_NOT_FIND_TAG_IN_IMPLEMENTATION = MESSAGE_SET.getMessage("CouldNotFindTagInImplementation");

	/** Idoc number is not found */
	public static final Message IDOC_NUMBER_IS_NOT_FOUND = MESSAGE_SET.getMessage("IdocNumberIsNotFound");

	/** Invalid request parameters. IDOC: {0} with status {1} */
	public static final Message INVALID_REQUEST_PARAMETERS = MESSAGE_SET.getMessage("InvalidRequestParameters");

	/** Rfm name not found for function {0} */
	public static final Message RFM_NAME_NOT_FOUND_FOR_FUNCTION = MESSAGE_SET.getMessage("RfmNameNotFoundForFunction");

	/** Error loading file {1} for bapi {0} */
	public static final Message ERROR_LOADING_FILE_FOR_BAPI = MESSAGE_SET.getMessage("ErrorLoadingFileForBapi");

	/** Error loading keystore of type {0}. Provider: {1}. Location: {2} */
	public static final Message ERROR_LOADING_KEYSTORE = MESSAGE_SET.getMessage("ErrorLoadingKeystore");

	/** Error deleting alias {0}. Keystore type {1}. Provider: {2}. Location: {3} */
	public static final Message ERROR_DELETING_ALIAS = MESSAGE_SET.getMessage("ErrorDeletingAlias");

	/** Error getting certificate details for alias {0}. Keystore type {1}. Provider: {2}. Location: {3} */
	public static final Message ERROR_GETTING_ALIAS_DETAILS = MESSAGE_SET.getMessage("ErrorGettingAliasDetails");

	/** Error getting entries for keystore of type {0}. Provider: {1}. Location: {2} */
	public static final Message ERROR_GETTING_ENTRIES = MESSAGE_SET.getMessage("ErrorGettingEntries");

	/** Error loading certificates with alias {4}.
Keystore type/provider: {0}/{1}
Keystore path: {2}
Certificate path: {3} */
	public static final Message ERROR_LOADING_CERTIFICATES = MESSAGE_SET.getMessage("ErrorLoadingCertificates");

	/** Could not create folder {0} */
	public static final Message COULD_NOT_CREATE_FOLDER = MESSAGE_SET.getMessage("CouldNotCreateFolder");

	/** Could not find tag {0} in the request. */
	public static final Message COULD_NOT_FIND_TAG_IN_REQUEST = MESSAGE_SET.getMessage("CouldNotFindTagInRequest");

	/** The given type {0} is invalid */
	public static final Message THE_GIVEN_TYPE_IN_INVALID = MESSAGE_SET.getMessage("TheGivenTypeInInvalid");

	/** Error generating wsdl */
	public static final Message ERROR_GENERATING_WSDL = MESSAGE_SET.getMessage("ErrorGeneratingWsdl");

	/** Error parsing wsdl:
{0} */
	public static final Message ERROR_PARSING_WSDL = MESSAGE_SET.getMessage("ErrorParsingWsdl");

	/** Could not parse idoc schema */
	public static final Message COULD_NOT_PARSE_IDOC_SCHEMA = MESSAGE_SET.getMessage("CouldNotParseIdocSchema");

	/** Invalid number: {0} */
	public static final Message INVALID_NUMBER = MESSAGE_SET.getMessage("InvalidNumber");

	/** Rfc name not set */
	public static final Message RFC_NAME_NOT_SET = MESSAGE_SET.getMessage("RfcNameNotSet");

	/** Login failed for user {0} */
	public static final Message LOGIN_FAILED_FOR_USER = MESSAGE_SET.getMessage("LoginFailedForUser");

	/** Unsupported metadata method {0} */
	public static final Message UNSUPPORTED_METADATA_METHOD = MESSAGE_SET.getMessage("UnsupportedMetadataMethod");

	/** The id must be set for the metadata cache */
	public static final Message THE_ID_MUST_BE_SET_FOR_THE_METADATA_CACHE = MESSAGE_SET.getMessage("TheIdMustBeSetForTheMetadataCache");

	/** The storage must be set for the metadata cache */
	public static final Message THE_STORAGE_MUST_BE_SET_FOR_THE_METADATA_CACHE = MESSAGE_SET.getMessage("TheStorageMustBeSetForTheMetadataCache");

	/** The connection must be set for the metadata cache */
	public static final Message THE_CONNECTION_MUST_BE_SET_FOR_THE_METADATA_CACHE = MESSAGE_SET.getMessage("TheConnectionMustBeSetForTheMetadataCache");

	/** Could not find the name of the bapi */
	public static final Message COULD_NOT_FIND_THE_NAME_OF_THE_BAPI = MESSAGE_SET.getMessage("CouldNotFindTheNameOfTheBapi");

	/** Could not find the name of the rfc */
	public static final Message COULD_NOT_FIND_THE_NAME_OF_THE_RFC = MESSAGE_SET.getMessage("CouldNotFindTheNameOfTheRfc");

	/** Could not find the name of the idoc */
	public static final Message COULD_NOT_FIND_THE_NAME_OF_THE_IDOC = MESSAGE_SET.getMessage("CouldNotFindTheNameOfTheIdoc");

	/** Error writing cache file {0} */
	public static final Message ERROR_WRITING_CACHE_FILE = MESSAGE_SET.getMessage("ErrorWritingCacheFile");

	/** Error loading metadata file {0} */
	public static final Message ERROR_LOADING_METADATA_FILE = MESSAGE_SET.getMessage("ErrorLoadingMetadataFile");

	/** Missing tag {0} */
	public static final Message MISSING_TAG = MESSAGE_SET.getMessage("MissingTag");

	/** Invalid filter type {0} */
	public static final Message INVALID_FILTER_TYPE = MESSAGE_SET.getMessage("InvalidFilterType");

	/** No action found in the method implementation */
	public static final Message NO_ACTION_FOUND_IN_THE_METHOD_IMPLEMENTATION = MESSAGE_SET.getMessage("NoActionFoundInTheMethodImplementation");

	/** Invalid action type {0} */
	public static final Message INVALID_ACTION_TYPE0 = MESSAGE_SET.getMessage("InvalidActionType0");

	/** Missing parameter type */
	public static final Message MISSING_PARAMETER_TYPE = MESSAGE_SET.getMessage("MissingParameterType");

	/** The filter is missing the field name. Type: {0} and value {1} */
	public static final Message THE_FILTER_IS_MISSING_THE_FIELD_NAME = MESSAGE_SET.getMessage("TheFilterIsMissingTheFieldName");

	/** Missing parameter read from sap */
	public static final Message MISSING_PARAMETER_READ_FROM_SAP = MESSAGE_SET.getMessage("MissingParameterReadFromSap");


}